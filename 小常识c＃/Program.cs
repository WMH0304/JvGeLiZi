using System;
using System.IO;


namespace 小常识c_
{
    #region 类和名称空间
    /*
     * 啥是类呢？
     * 以前一直以为类就是构成程序的主体，是一种数据结构，是对对象的抽象啥的
     * 最近在听刘铁猛老师的课，普及了以前很多不知道的小常识，做个记录
     * 
     * 什么是类呢？
     * A: 类是一个数据结构，将状态（字段）和操作（方法和其它函数成员）组合在一个单元里面，
     * B: 类为动态创建的类实例（instance）提供了定义，其实类的实例就是对象了（object） 也可以理解成各种数据类型也是一种对象，
     * C: 类支持 继承（【 inhcritance 】当然，是单继承，而接口支持多继承）和多态性（[ polymorphism ] ）这个是派生类（ derivcd class ） 可以用来
     * 扩展和专用化基类（ basc class 就是子类了 ）的机制
     * 
     * C1: 什么是多态性呢？
     * C2: 多态性有 编译时的多态性 和 运行时的多态性 两种，
     * C3: 编译时的多态性编译时的多态性是通过重载来实现的。对于非虚的成员来说，系统在编译时，根据传递的参数、
     * 返回的类型等信息决定实现何种操作。（说白了，就是数据类型的多样性）
     * 
     * C4: 运行时的多态性就是指直到系统运行时，才根据实际情况决定实现何种操作。C#中运行时的多态性是通过覆写虚成员实现。 (可以理解成是程序运行时的状态的多样性)
     * 
     * D: 类的实例的过程就是 ： 给类分配内存后就成了实例，然后调用构造函数初始化实例，并返回对实例的引用。
     * 
     * 
     * namespace （名称空间） 的作用是什么呢?
     * A: 相当于是一个树形的节点，当你要找到某一个特定的函数的时候可以名称空间进行检索。
     * B: 通过 using 引用,当然也可以从函数里面通过一个访问权限引用 （或者说是一个标记）
     * C: 为什么要用到访问这个访问表记呢？ 
     * D: 因为在不同的命名空间里面可能会存在有相同的类名，当你同时引用两个命名空间是可能会发现应用冲突
     * E: 这个就是访问标记存在的意义
     * 
     * 
     */
    class Program 
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            System.Console.WriteLine("Hello World!");//权限命名，给一个访问名称空间的权限
            
        }
    }
    #endregion

    #region 类，对象，类成员
    /*
     * 啥是类呢？
     * 类是对现实世界事物进行抽象的模型
     * 事物包括"物质（就是实体了）" 和 "运动(逻辑)"
     * 就是把现实中相对有意义的一些属性抽象到程序里面
     * 有点唯物主义的味道，去伪存真，由表及里的过程
     * 
     * 类和对象的关系
     * 按照我的理解就是 类是对对象的抽象，只一个概念，而对象就是对类是实例化，是一个实体
     * 而在现实世界中 类是对某一事物的描述，而这个被描述的东西就是对象也叫实例
     * 而在程序中，所谓的对象就是类经过实例化之后得到的内存中的实体，（或者说，实例化就是给类分配内存，之后他就是一个实例（对象了））
     * 
     * 
     * 
     */
    #endregion
}
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































